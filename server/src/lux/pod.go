/**
(C) Sheer Industries Group

 Format conversion functionality.

Missing tests:

+TestSimpleCollada
TestObjToCollada
TestPodConverter

Tasks:
+SaveColladaFile
ConvertColladaToPod
*/

package lux

import (
	"text/template"
    "os"
	_ "os/exec"
	_ "testing"
	_ "bytes"
)

// ColladaText specifies the Collada file template to be expanded.
var ColladaText = `<?xml version="1.0" encoding="UTF-8"?>
<COLLADA xmlns="http://www.collada.org/2005/11/COLLADASchema" version="1.4.1">
    <asset>
        <contributor>
            <author>VCGLab</author>
            <authoring_tool>VCGLib | MeshLab</authoring_tool>
        </contributor>
        <up_axis>Y_UP</up_axis>
        <created>Чт 19. дек 01:22:29 2013</created>
        <modified>Чт 19. дек 01:22:29 2013</modified>
    </asset>
    <library_images/>
    <library_materials/>
    <library_effects/>
    <library_geometries>
        <geometry id="shape0-lib" name="shape0">
            <mesh>
                <source id="shape0-lib-positions" name="position">
                    <float_array id="shape0-lib-positions-array" count="{{len .Vertices}}">{{ range .Vertices }} {{.}}{{ end }}</float_array>
                    <technique_common>
                        <accessor count="{{len .Vertices | triples}}" source="#shape0-lib-positions-array" stride="3">
                            <param name="X" type="float"/>
                            <param name="Y" type="float"/>
                            <param name="Z" type="float"/>
                        </accessor>
                    </technique_common>
                </source>
                <source id="shape0-lib-normals" name="normal">
                    <float_array id="shape0-lib-normals-array" count="{{len .Normals}}">{{ range .Normals }} {{.}}{{ end }}</float_array>
                    <technique_common>
                        <accessor count="{{len .Normals | triples}}" source="#shape0-lib-normals-array" stride="3">
                            <param name="X" type="float"/>
                            <param name="Y" type="float"/>
                            <param name="Z" type="float"/>
                        </accessor>
                    </technique_common>
                </source>
                <source id="shape0-lib-map" name="map">
                    <float_array id="shape0-lib-map-array" count="{{len .Textures}}">{{ range .Textures }} {{.}}{{ end }}</float_array>
                    <technique_common>
                        <accessor count="{{len .Textures | pairs}}" source="#shape0-lib-map-array" stride="2">
                            <param name="U" type="float"/>
                            <param name="V" type="float"/>
                        </accessor>
                    </technique_common>
                </source>
                <vertices id="shape0-lib-vertices">
                    <input semantic="POSITION" source="#shape0-lib-positions"/>
                </vertices>
                <triangles count="{{len .Triangles | triples}}">
                    <input offset="0" semantic="VERTEX" source="#shape0-lib-vertices"/>
                    <p>{{ range .Triangles }} {{.}}{{ end }}</p>
                </triangles>
            </mesh>
        </geometry>
    </library_geometries>
    <library_visual_scenes>
        <visual_scene id="VisualSceneNode" name="VisualScene">
            <node id="node" name="node">
                <instance_geometry url="#shape0-lib">
                    <bind_material>
                        <technique_common/>
                    </bind_material>
                </instance_geometry>
            </node>
        </visual_scene>
    </library_visual_scenes>
    <scene>
        <instance_visual_scene url="#VisualSceneNode"/>
    </scene></COLLADA>`


var fm = template.FuncMap{ "pairs": func(i int) int{return i/2},
                        "triples": func(i int) int{return i/3}}

// ColladaTemplate is a template object for generating Collada files.
var ColladaTemplate = template.Must(template.New("OBJ").Funcs(fm).Parse(ColladaText))

// ColladaData is input for ColladaTemplate
type ColladaData struct{
	Vertices, Normals, Textures []float32
	Triangles []int
	// Numbering; autogenerated.
}

// OBJToData converts OBJ data into ColladaData for template processing.
func OBJToCollada(an OBJ) ColladaData {
	cd := ColladaData {
		[]float32{},[]float32{},[]float32{},
		[]int{}}

	for _, n := range an.Vertices {
		v := [3]float32(n)
		cd.Vertices = append( cd.Vertices, v[:]...)
	}

	for _, n := range an.Normals {
		v := [3]float32(n)
		cd.Normals = append( cd.Normals, v[:]...)
	}

	for _, n := range an.UWs {
		v := [2]float32(n)
		cd.Textures = append( cd.Textures, v[:]...)
	}

	for _, g := range an.Geodes {
		for _, face := range g.Faces {
			for i := 0; i < len(face)-2; i++ {
				cd.Triangles = append( cd.Triangles, face[0].V-1, face[1+i].V-1, face[2+i].V-1)
			}
		}
	}

	return cd
}

// WriteCollada outputs final ColladaData to a Collada file.
func WriteCollada(where string, cd ColladaData) error{
    f, err := os.Create(where)
	if err != nil {
		return err
	}
	defer f.Close()
	return ColladaTemplate.Execute(f, cd)
}

// ConvertColladaPod converts existing Collada file into a POD file using external convertor from POD SDK.
func ConvertColladaPod(in, out string) error{
	if err := CheckPod(); err != nil {
		return err
	}



	return nil
}
